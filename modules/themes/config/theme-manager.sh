#!/usr/bin/env bash
# Theme Manager for Hyprland Dream
# Manages transparency, blur effects, Nerd Fonts, and system color consistency

set -e

SCRIPT_DIR="$(dirname "$0")"
ROOT_DIR="$SCRIPT_DIR/../../.."
source "$ROOT_DIR/lib/utils.sh"
source "$ROOT_DIR/core/logger.sh"

init_logger

# Theme configurations
THEMES_DIR="$SCRIPT_DIR/themes"
CONFIG_DIR="$HOME/.config"
CACHE_DIR="$HOME/.cache/hyprdream-themes"

# Color schemes
declare -A COLOR_SCHEMES=(
    ["catppuccin-mocha"]="#1E1E2E:#181825:#CDD6F4:#A6ADC8:#89B4FA:#A6E3A1:#F38BA8:#FAB387:#B4BEFE:#F5C2E7"
    ["dracula"]="#282A36:#21222C:#F8F8F2:#6272A4:#BD93F9:#50FA7B:#FF5555:#FFB86C:#8BE9FD:#FF79C6"
    ["nord"]="#2E3440:#3B4252:#ECEFF4:#D8DEE9:#88C0D0:#A3BE8C:#BF616A:#EBCB8B:#81A1C1:#B48EAD"
    ["tokyo-night"]="#1A1B26:#16161E:#C0CAF5:#9AA5CE:#7AA2F7:#9ECE6A:#F7768E:#E0AF68:#BB9AF7:#F7768E"
    ["gruvbox"]="#282828:#3C3836:#EBDBB2:#928374:#83A598:#B8BB26:#FB4934:#FABD2F:#83A598:#D3869B"
)

# Transparency and blur settings
declare -A BLUR_SETTINGS=(
    ["subtle"]="0.85:0.3:3"
    ["medium"]="0.75:0.5:5"
    ["strong"]="0.65:0.7:8"
    ["glass"]="0.5:0.8:10"
)

# Nerd Fonts configuration
NERD_FONTS=(
    "JetBrainsMono Nerd Font"
    "FiraCode Nerd Font"
    "Hack Nerd Font"
    "SourceCodePro Nerd Font"
    "CascadiaCode Nerd Font"
)

# Create necessary directories
create_directories() {
    mkdir -p "$THEMES_DIR" "$CACHE_DIR" "$CONFIG_DIR/rofi" "$CONFIG_DIR/waybar" "$CONFIG_DIR/hypr"
    log_info "Directories created"
}

# Install Nerd Fonts
install_nerd_fonts() {
    log_info "Installing Nerd Fonts..."
    
    local fonts=(
        "nerd-fonts-jetbrains-mono"
        "nerd-fonts-fira-code"
        "nerd-fonts-hack"
        "nerd-fonts-source-code-pro"
        "nerd-fonts-cascadia-code"
    )
    
    for font in "${fonts[@]}"; do
        install_package "$font"
    done
    
    # Refresh font cache
    fc-cache -fv
    log_ok "Nerd Fonts installed and cache refreshed"
}

# Generate theme with transparency and blur
generate_theme() {
    local theme_name="$1"
    local blur_level="$2"
    local output_file="$3"
    
    local colors=(${COLOR_SCHEMES[$theme_name]//:/ })
    local blur_settings=(${BLUR_SETTINGS[$blur_level]//:/ })
    
    local bg_alpha="${blur_settings[0]}"
    local blur_strength="${blur_settings[1]}"
    local blur_passes="${blur_settings[2]}"
    
    cat > "$output_file" << EOF
/* Generated Theme: $theme_name with $blur_level blur */
/* Generated by Hyprland Dream Theme Manager */

* {
    /* Base colors */
    background:           ${colors[0]};
    background-alt:       ${colors[1]};
    background-blur:      rgba($(hex_to_rgb "${colors[0]}"), $bg_alpha);
    background-glass:     rgba($(hex_to_rgb "${colors[0]}"), $(echo "$bg_alpha - 0.1" | bc -l));
    foreground:           ${colors[2]};
    foreground-alt:       ${colors[3]};
    foreground-dim:       $(adjust_brightness "${colors[3]}" -20);
    
    /* State colors */
    selected:             ${colors[4]};
    active:               ${colors[5]};
    urgent:               ${colors[6]};
    warning:              ${colors[7]};
    
    /* Border and accent colors */
    border:               ${colors[8]};
    border-dim:           rgba($(hex_to_rgb "${colors[8]}"), 0.3);
    accent:               ${colors[9]};
    
    /* Hover and focus colors */
    hover:                rgba($(hex_to_rgb "${colors[4]}"), 0.2);
    focus:                rgba($(hex_to_rgb "${colors[5]}"), 0.2);
    
    /* Text colors */
    text-primary:         ${colors[2]};
    text-secondary:       ${colors[3]};
    text-muted:           $(adjust_brightness "${colors[3]}" -30);
    
    /* Surface colors with blur */
    surface:              rgba($(hex_to_rgb "${colors[0]}"), 0.95);
    surface-alt:          rgba($(hex_to_rgb "${colors[1]}"), 0.95);
    overlay:              rgba(0, 0, 0, 0.3);
    
    /* Blur settings */
    blur-strength:        $blur_strength;
    blur-passes:          $blur_passes;
}

/* Blur effects for different components */
window {
    background-color:     @background-blur;
    border:               2px solid @border;
    border-radius:        16px;
    transparency:         "real";
}

mainbox {
    background-color:     transparent;
}

inputbar {
    background-color:     @surface;
    border:               1px solid @border-dim;
    border-radius:        12px;
}

element {
    background-color:     transparent;
    border-radius:        8px;
}

element.selected.normal {
    background-color:     @selected;
    border:               1px solid @border;
}

/* Smooth animations */
* {
    transition-duration:  0.2s;
    transition-timing-function: ease-out;
}

element:hover {
    background-color:     @hover;
    transform:            scale(1.02);
}

button:hover {
    background-color:     @hover;
    transform:            scale(1.05);
}
EOF

    log_info "Generated theme: $theme_name ($blur_level blur)"
}

# Convert hex to RGB
hex_to_rgb() {
    local hex="$1"
    local r=$((16#${hex:1:2}))
    local g=$((16#${hex:3:2}))
    local b=$((16#${hex:5:2}))
    echo "$r, $g, $b"
}

# Adjust brightness of a hex color
adjust_brightness() {
    local hex="$1"
    local adjustment="$2"
    
    local r=$((16#${hex:1:2}))
    local g=$((16#${hex:3:2}))
    local b=$((16#${hex:5:2}))
    
    r=$((r + adjustment))
    g=$((g + adjustment))
    b=$((b + adjustment))
    
    # Clamp values
    r=$((r < 0 ? 0 : (r > 255 ? 255 : r)))
    g=$((g < 0 ? 0 : (g > 255 ? 255 : g)))
    b=$((b < 0 ? 0 : (b > 255 ? 255 : b)))
    
    printf "#%02X%02X%02X" $r $g $b
}

# Apply theme to all components
apply_theme() {
    local theme_name="$1"
    local blur_level="$2"
    
    log_info "Applying theme: $theme_name with $blur_level blur"
    
    # Generate and apply Rofi theme
    generate_theme "$theme_name" "$blur_level" "$CONFIG_DIR/rofi/colors.rasi"
    
    # Generate Waybar theme
    generate_waybar_theme "$theme_name" "$blur_level"
    
    # Generate Hyprland theme
    generate_hyprland_theme "$theme_name" "$blur_level"
    
    # Update GTK theme
    update_gtk_theme "$theme_name"
    
    # Cache theme settings
    echo "$theme_name:$blur_level" > "$CACHE_DIR/current-theme"
    
    log_ok "Theme applied successfully"
}

# Generate Waybar theme
generate_waybar_theme() {
    local theme_name="$1"
    local blur_level="$2"
    local colors=(${COLOR_SCHEMES[$theme_name]//:/ })
    local blur_settings=(${BLUR_SETTINGS[$blur_level]//:/ })
    
    cat > "$CONFIG_DIR/waybar/style.css" << EOF
/* Waybar Theme: $theme_name */
/* Generated by Hyprland Dream Theme Manager */

* {
    border: none;
    border-radius: 0;
    font-family: "JetBrainsMono Nerd Font", "Font Awesome 6 Free", "Font Awesome 6 Brands", "Font Awesome 6 Free Solid", sans-serif;
    font-size: 12px;
    min-height: 0;
}

window#waybar {
    background-color: rgba($(hex_to_rgb "${colors[0]}"), ${blur_settings[0]});
    border-bottom: 2px solid ${colors[8]};
    color: ${colors[2]};
    transition-property: background-color;
    transition-duration: .5s;
}

#workspaces button {
    padding: 0 5px;
    background-color: transparent;
    color: ${colors[3]};
    border-bottom: 3px solid transparent;
}

#workspaces button:hover {
    background: rgba($(hex_to_rgb "${colors[4]}"), 0.2);
    box-shadow: inherit;
    text-shadow: inherit;
}

#workspaces button.active {
    background-color: ${colors[4]};
    color: ${colors[0]};
    border-bottom: 3px solid ${colors[8]};
}

#workspaces button.urgent {
    background-color: ${colors[6]};
    color: ${colors[0]};
}

#mode {
    background-color: ${colors[7]};
    color: ${colors[0]};
    border-bottom: 3px solid ${colors[8]};
}

#clock,
#battery,
#cpu,
#memory,
#disk,
#temperature,
#backlight,
#network,
#pulseaudio,
#wireplumber,
#custom-media,
#tray,
#mode,
#idle_inhibitor,
#scratchpad,
#mpd {
    padding: 0 10px;
    margin: 0 4px;
    color: ${colors[2]};
    background-color: rgba($(hex_to_rgb "${colors[1]}"), 0.8);
    border-radius: 8px;
}

#window,
#workspaces {
    margin: 0 4px;
}

.modules-left > widget:first-child > #workspaces {
    margin-left: 0;
}

.modules-right > widget:last-child > #workspaces {
    margin-right: 0;
}

#battery.charging, #battery.plugged {
    color: ${colors[5]};
    background-color: rgba($(hex_to_rgb "${colors[5]}"), 0.2);
}

@keyframes blink {
    to {
        background-color: ${colors[2]};
        color: ${colors[0]};
    }
}

#battery.critical:not(.charging) {
    background-color: ${colors[6]};
    color: ${colors[0]};
    animation-name: blink;
    animation-duration: 0.5s;
    animation-timing-function: linear;
    animation-iteration-count: infinite;
    animation-direction: alternate;
}

label:focus {
    background-color: ${colors[0]};
}

#network.disconnected {
    background-color: ${colors[6]};
    color: ${colors[0]};
}

#pulseaudio.muted {
    background-color: ${colors[6]};
    color: ${colors[0]};
}

#wireplumber {
    background-color: ${colors[6]};
    color: ${colors[0]};
}

#wireplumber.muted {
    background-color: ${colors[6]};
    color: ${colors[0]};
}

#temperature.critical {
    background-color: ${colors[6]};
    color: ${colors[0]};
}

#tray > .passive {
    -gtk-icon-effect: dim;
}

#tray > .needs-attention {
    -gtk-icon-effect: highlight;
    background-color: ${colors[6]};
    color: ${colors[0]};
}

#idle_inhibitor.activated {
    background-color: ${colors[2]};
    color: ${colors[0]};
}

#mpd.stopped {
    background-color: ${colors[6]};
    color: ${colors[0]};
}

#mpd.paused {
    background-color: ${colors[7]};
    color: ${colors[0]};
}

#language {
    background: ${colors[4]};
    color: ${colors[0]};
    padding: 0 5px;
    margin: 0 5px;
    min-width: 16px;
}

#keyboard-state {
    background: ${colors[4]};
    color: ${colors[0]};
    padding: 0 0px;
    margin: 0 5px;
    min-width: 16px;
}

#keyboard-state > label {
    padding: 0px 5px;
}

#keyboard-state > label.locked {
    background: rgba($(hex_to_rgb "${colors[6]}"), 0.2);
}

#scratchpad {
    background: rgba($(hex_to_rgb "${colors[0]}"), 0.8);
}

#scratchpad.empty {
    background-color: transparent;
}
EOF
}

# Generate Hyprland theme
generate_hyprland_theme() {
    local theme_name="$1"
    local blur_level="$2"
    local colors=(${COLOR_SCHEMES[$theme_name]//:/ })
    local blur_settings=(${BLUR_SETTINGS[$blur_level]//:/ })
    
    cat > "$CONFIG_DIR/hypr/theme.conf" << EOF
# Hyprland Theme: $theme_name
# Generated by Hyprland Dream Theme Manager

# Colors
\$bg = ${colors[0]}
\$bg-alt = ${colors[1]}
\$fg = ${colors[2]}
\$fg-alt = ${colors[3]}
\$accent = ${colors[4]}
\$accent-alt = ${colors[5]}
\$urgent = ${colors[6]}
\$warning = ${colors[7]}
\$border = ${colors[8]}
\$border-alt = ${colors[9]}

# Blur settings
\$blur-strength = ${blur_settings[1]}
\$blur-passes = ${blur_settings[2]}

# Window decorations
decoration {
    rounding = 12
    blur {
        enabled = true
        size = \$blur-strength
        passes = \$blur-passes
        new_optimizations = true
        xray = false
        ignore_opacity = true
    }
    
    drop_shadow = true
    shadow_range = 4
    shadow_render_power = 3
    col.shadow = rgba(0, 0, 0, 0.3)
    col.shadow_inactive = rgba(0, 0, 0, 0.2)
}

# General appearance
general {
    border_size = 2
    col.active_border = \$border
    col.inactive_border = \$border-alt
    col.group_border = \$accent
    col.group_border_active = \$accent-alt
}

# Animations
animations {
    enabled = true
    bezier = myBezier, 0.05, 0.9, 0.1, 1.05
    bezier = smoothOut, 0.36, 0, 0.66, -0.56
    bezier = smoothIn, 0.25, 1, 0.5, 1
    
    animation = windows, 1, 7, myBezier, slide
    animation = windowsOut, 1, 7, smoothOut, slide
    animation = windowsMove, 1, 7, myBezier, slide
    animation = borderangle, 1, 10, myBezier, loop
    animation = fade, 1, 7, smoothIn
    animation = workspaces, 1, 6, myBezier, slide
}

# Misc
misc {
    animate_manual_resizes = true
    animate_mouse_windowdragging = true
    background_color = \$bg
    new_window_takes_over_fullscreen = 2
}

# Input
input {
    kb_layout = us
    kb_variant = 
    kb_model = 
    kb_options = 
    kb_rules = 
    
    follow_mouse = 1
    sensitivity = 0.8
    accel_profile = flat
    force_no_accel = false
    
    touchpad {
        natural_scroll = true
        scroll_factor = 0.3
        middle_button_emulation = true
        tap-to-click = true
        drag_lock = false
    }
}

# Gestures
gestures {
    workspace_swipe = true
    workspace_swipe_fingers = 3
    workspace_swipe_distance = 300
    workspace_swipe_invert = false
    workspace_swipe_min_speed_to_force = 30
    workspace_swipe_cancel_ratio = 0.5
    workspace_swipe_create_new = true
    workspace_swipe_forever = true
}

# XWayland
xwayland {
    force_zero_scaling = true
}

# Environment
env = XCURSOR_SIZE,24
env = QT_QPA_PLATFORMTHEME,qt5ct
env = QT_STYLE_OVERRIDE,kvantum
env = QT_AUTO_SCREEN_SCALE_FACTOR,1
env = QT_SCALE_FACTOR,1
env = GDK_SCALE,1
env = XDG_SESSION_TYPE,wayland
env = XDG_CURRENT_DESKTOP,Hyprland
env = XDG_SESSION_DESKTOP,Hyprland
env = QT_QPA_PLATFORM,wayland
env = QT_WAYLAND_DISABLE_WINDOWDECORATION,1
env = QT_AUTO_SCREEN_SCALE_FACTOR,1
env = MOZ_ENABLE_WAYLAND,1
env = WLR_NO_HARDWARE_CURSORS,1
env = WLR_RENDERER_ALLOW_SOFTWARE,1
env = CLUTTER_BACKEND,wayland
env = SDL_VIDEODRIVER,wayland
env = _JAVA_AWT_WM_NONREPARENTING,1
env = AWT_TOOLKIT,MToolkit
env = NO_AT_BRIDGE,1
env = GDK_BACKEND,wayland
env = XDG_SESSION_TYPE,wayland
env = XDG_CURRENT_DESKTOP,Hyprland
env = XDG_SESSION_DESKTOP,Hyprland
env = QT_QPA_PLATFORM,wayland
env = QT_WAYLAND_DISABLE_WINDOWDECORATION,1
env = QT_AUTO_SCREEN_SCALE_FACTOR,1
env = MOZ_ENABLE_WAYLAND,1
env = WLR_NO_HARDWARE_CURSORS,1
env = WLR_RENDERER_ALLOW_SOFTWARE,1
env = CLUTTER_BACKEND,wayland
env = SDL_VIDEODRIVER,wayland
env = _JAVA_AWT_WM_NONREPARENTING,1
env = AWT_TOOLKIT,MToolkit
env = NO_AT_BRIDGE,1
env = GDK_BACKEND,wayland
EOF
}

# Update GTK theme
update_gtk_theme() {
    local theme_name="$1"
    
    # Map theme names to GTK themes
    declare -A gtk_themes=(
        ["catppuccin-mocha"]="Catppuccin-Mocha-Standard-Mauve-Dark"
        ["dracula"]="Dracula"
        ["nord"]="Nordic"
        ["tokyo-night"]="Tokyo-Night"
        ["gruvbox"]="Gruvbox-Dark-B"
    )
    
    local gtk_theme="${gtk_themes[$theme_name]}"
    if [[ -n "$gtk_theme" ]]; then
        gsettings set org.gnome.desktop.interface gtk-theme "$gtk_theme"
        gsettings set org.gnome.desktop.interface icon-theme "Papirus-Dark"
        gsettings set org.gnome.desktop.interface cursor-theme "Catppuccin-Mocha-Mauve-Cursors"
        log_info "GTK theme updated to: $gtk_theme"
    fi
}

# List available themes
list_themes() {
    echo -e "\n${CYAN}Available Themes:${RESET}"
    for theme in "${!COLOR_SCHEMES[@]}"; do
        echo "  - $theme"
    done
    
    echo -e "\n${CYAN}Available Blur Levels:${RESET}"
    for blur in "${!BLUR_SETTINGS[@]}"; do
        echo "  - $blur"
    done
}

# Show current theme
show_current_theme() {
    if [[ -f "$CACHE_DIR/current-theme" ]]; then
        local current=$(cat "$CACHE_DIR/current-theme")
        echo -e "\n${GREEN}Current Theme:${RESET} $current"
    else
        echo -e "\n${YELLOW}No theme currently applied${RESET}"
    fi
}

# Main menu
show_menu() {
    echo -e "\n${CYAN}=== Hyprland Dream Theme Manager ===${RESET}"
    echo " 1) Install Nerd Fonts"
    echo " 2) Apply Theme"
    echo " 3) List Available Themes"
    echo " 4) Show Current Theme"
    echo " 5) Create Custom Theme"
    echo " 0) Exit"
    echo -n "Option: "
    read -r opt
    
    case $opt in
        1) install_nerd_fonts ;;
        2) 
            list_themes
            echo -n "Theme name: "
            read -r theme_name
            echo -n "Blur level (subtle/medium/strong/glass): "
            read -r blur_level
            apply_theme "$theme_name" "$blur_level"
            ;;
        3) list_themes ;;
        4) show_current_theme ;;
        5) create_custom_theme ;;
        0) log_info "Exiting..."; exit 0 ;;
        *) log_warn "Invalid option." ;;
    esac
}

# Create custom theme
create_custom_theme() {
    echo -e "\n${CYAN}Creating Custom Theme${RESET}"
    echo -n "Theme name: "
    read -r theme_name
    echo -n "Background color (hex): "
    read -r bg_color
    echo -n "Foreground color (hex): "
    read -r fg_color
    echo -n "Accent color (hex): "
    read -r accent_color
    
    # Add to color schemes
    COLOR_SCHEMES["$theme_name"]="$bg_color:#181825:$fg_color:#A6ADC8:$accent_color:#A6E3A1:#F38BA8:#FAB387:#B4BEFE:#F5C2E7"
    
    log_info "Custom theme '$theme_name' created"
}

# Initialize
main() {
    create_directories
    
    if [[ "${BASH_SOURCE[0]}" == "$0" ]]; then
        show_menu
    fi
}

main "$@" 