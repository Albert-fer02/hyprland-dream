# ~/.nanorc - Hyprland Dream Configuration
# Tema: Catppuccin Mocha optimizado para máxima productividad
# Versión: 2.0 - Sistema Avanzado


# 1. Crear directorio de respaldos
#mkdir -p ~/.nano/backups

# 2. Instalar herramientas opcionales
#pip install black              # Para formateo Python
#npm install -g prettier        # Para formateo JS/TS

# 3. Copiar la configuración
#cp /path/to/optimized/.nanorc ~/.nanorc


# =============================================================================
# SECCIÓN 1: COMPORTAMIENTO FUNDAMENTAL
# =============================================================================

# Edición inteligente
set autoindent          # Indentar nuevas líneas automáticamente
set smarthome           # Home va al primer carácter no-blanco, luego al inicio
set tabsize 4           # Tamaño estándar de tabulación
set tabstospaces        # Convertir tabs a espacios (mejor compatibilidad)
set trimblanks          # Eliminar espacios finales al guardar
set wordbounds          # Detección inteligente de límites de palabra
set wordchars "_-"      # Incluir guiones en palabras (útil para CSS/HTML)

# Gestión de archivos mejorada
set backup              # Crear respaldos automáticos
set backupdir "~/.nano/backups"  # Directorio organizado para respaldos
set historylog          # Persistir historial de búsqueda entre sesiones
set positionlog         # Recordar posición del cursor por archivo
set multibuffer         # Soporte para múltiples archivos abiertos
set locking             # Prevenir conflictos de edición concurrente

# Comportamiento del sistema
set unix                # Usar terminaciones de línea Unix (LF)
set rawsequences        # Mejor soporte para secuencias de teclado
set mouse               # Habilitar soporte completo de ratón
set softwrap            # Ajuste suave de líneas (mejor que hard wrap)
set atblanks            # Romper líneas en espacios, no caracteres
set cutfromcursor       # Ctrl+K corta desde cursor (más intuitivo)
set zap                 # Meta+Backspace elimina palabra completa

# =============================================================================
# SECCIÓN 2: INTERFAZ VISUAL MODERNA
# =============================================================================

# Información de estado
set constantshow        # Mostrar siempre línea/columna
set linenumbers         # Números de línea visibles
set indicator           # Indicador de posición en archivos largos
set minibar             # Barra de información compacta

# Elementos visuales
set whitespace "•·"     # Visualizar espacios/tabs de forma sutil
set matchbrackets "(<[{)>]}"  # Resaltar brackets coincidentes
set guidestripe 88      # Línea guía en columna 88 (PEP 8 para Python)
set scrollercolor brightcyan  # Color del scroll indicator

# Optimizaciones de rendimiento visual
set quickblank          # Limpiar mensajes de estado rápidamente
set nonewlines          # No forzar línea final (respeta el archivo original)

# =============================================================================
# SECCIÓN 3: TEMA CATPPUCCIN MOCHA OPTIMIZADO
# =============================================================================

# Interfaz principal con mejor contraste
set titlecolor bold,brightblue,black       # Título destacado
set statuscolor bold,brightgreen,black     # Estado verde para éxito
set promptcolor brightwhite,black          # Prompts legibles
set errorcolor bold,brightred,black        # Errores claramente visibles

# Elementos de código
set numbercolor brightmagenta              # Números de línea sutiles
set selectedcolor black,brightcyan         # Selección con alto contraste
set keycolor brightgreen                   # Atajos de teclado
set functioncolor brightblue               # Funciones destacadas

# Búsqueda y navegación
set spotlightcolor black,brightyellow      # Resultados de búsqueda destacados
set stripecolor ,brightblack               # Línea guía discreta

# =============================================================================
# SECCIÓN 4: RESALTADO DE SINTAXIS COMPLETO
# =============================================================================

# Cargar todas las definiciones de sintaxis del sistema
include "/usr/share/nano/*.nanorc"

# Definiciones adicionales comunes (verificar existencia)
include "/usr/share/nano/extra/*.nanorc" 2>/dev/null || true

# =============================================================================
# SECCIÓN 5: HERRAMIENTAS DE PRODUCTIVIDAD
# =============================================================================

# Corrector ortográfico mejorado
set speller "aspell -x -c --lang=es"

# Configuraciones para diferentes tipos de archivos
set punct "!.?:;"       # Puntuación extendida para navegación
set brackets ""')>]}"   # Brackets para matching

# =============================================================================
# SECCIÓN 6: ATAJOS PERSONALIZADOS MEJORADOS
# =============================================================================

# F5: Ejecutar archivo según extensión (mejorado y más seguro)
bind F5 "^T^Xclear && echo '=== Ejecutando: % ===' && case % in *.py) python3 "%" ;; *.js) node "%" ;; *.sh) bash "%" ;; *.rs) rustc "%" -o /tmp/nano_run_$$ && /tmp/nano_run_$$ && rm -f /tmp/nano_run_$$ ;; *.c) gcc "%" -o /tmp/nano_run_$$ && /tmp/nano_run_$$ && rm -f /tmp/nano_run_$$ ;; *.cpp) g++ "%" -o /tmp/nano_run_$$ && /tmp/nano_run_$$ && rm -f /tmp/nano_run_$$ ;; *) echo 'Tipo de archivo no soportado' ;; esac; echo; read -p 'Presiona Enter para continuar...' dummy^M" main

# F6: Git diff mejorado con paginación
bind F6 "^T^Xclear && cd $(dirname %) && echo '=== Git Diff: $(basename %) ===' && git diff --color=always --unified=3 $(basename %) | less -R; clear^M" main

# F7: Git workflow completo
bind F7 "^T^Xclear && cd $(dirname %) && echo '=== Git Status ===' && git status --short && echo && echo '=== Agregando archivo ===' && git add $(basename %) && echo 'Archivo agregado al stage' && git status --short; read -p 'Enter para continuar...' dummy^M" main

# F8: Información detallada del archivo
bind F8 "^T^Xclear && echo '=== Información de: % ===' && ls -lah % && echo && file % && echo && echo 'Líneas: '$(wc -l < %) && echo 'Palabras: '$(wc -w < %) && echo 'Caracteres: '$(wc -c < %); read -p 'Enter para continuar...' dummy^M" main

# F9: Buscar comentarios de desarrollo
bind F9 "^T^Xclear && echo '=== Comentarios de Desarrollo ===' && grep -n -i -E '(TODO|FIXME|NOTE|BUG|HACK|XXX|OPTIMIZE)' % 2>/dev/null | head -20 || echo 'No hay comentarios de desarrollo'; read -p 'Enter para continuar...' dummy^M" main

# F10: Análisis de estructura de código mejorado
bind F10 "^T^Xclear && echo '=== Estructura del Código ===' && case % in *.py) grep -n '^[[:space:]]*\(def\|class\|async def\)' % ;; *.js|*.ts) grep -n '^[[:space:]]*\(function\|class\|const.*=>\|export\)' % ;; *.c|*.cpp|*.h) grep -n '^[[:space:]]*\(int\|void\|char\|float\|double\|bool\).*[({]' % ;; *.java) grep -n '^[[:space:]]*\(public\|private\|protected\).*[({]' % ;; *) echo 'Análisis no disponible para este tipo de archivo' ;; esac | head -30; read -p 'Enter para continuar...' dummy^M" main

# F11: Formatear código (básico)
bind F11 "^T^Xclear && echo '=== Formateando código ===' && case % in *.py) python3 -m black % 2>/dev/null && echo 'Formateado con black' || echo 'black no disponible' ;; *.js|*.ts) prettier --write % 2>/dev/null && echo 'Formateado con prettier' || echo 'prettier no disponible' ;; *) echo 'Formateo no disponible para este tipo' ;; esac; read -p 'Enter para continuar...' dummy^M" main

# F12: Búsqueda de funciones/métodos
bind F12 "^W^T^Xfunction ^M" main

# Atajos adicionales útiles
bind ^D "{end}{enter}{up}{dup}" main        # Ctrl+D: Duplicar línea
bind M-U "{start}{mark}{end}^T" main        # Alt+U: Convertir línea a mayúsculas
bind M-L "{start}{mark}{end}^T" main        # Alt+L: Convertir línea a minúsculas

# =============================================================================
# SECCIÓN 7: CONFIGURACIONES ESPECÍFICAS POR TIPO DE ARCHIVO
# =============================================================================

# Python: configuración específica
# (Esto requeriría archivos separados en ~/.nano/ pero se puede configurar aquí)

# =============================================================================
# SECCIÓN 8: RESPALDOS Y SEGURIDAD
# =============================================================================

# Asegurar que el directorio de respaldos existe
# Nota: Esto debe hacerse en shell: mkdir -p ~/.nano/backups

# =============================================================================
# SECCIÓN 9: CONFIGURACIONES EXPERIMENTALES OPCIONALES
# =============================================================================

# Descomenta estas líneas para probar funcionalidades avanzadas:
# set boldtext            # Texto en negrita para mejor legibilidad
# set casesensitive       # Búsquedas sensibles a mayúsculas por defecto
# set jumpyscrolling      # Scroll más rápido en archivos grandes
# set morespace           # Usar más espacio vertical para texto

# =============================================================================
# NOTAS DE USO:
# =============================================================================
# 1. Ejecutar: mkdir -p ~/.nano/backups antes de usar
# 2. Para Python, instalar: pip install black
# 3. Para JavaScript, instalar: npm install -g prettier  
# 4. Los atajos F5-F12 requieren bash como shell
# 5. Usar Ctrl+T para acceder al navegador de archivos
# 6. M-< y M-> para cambiar entre archivos múltiples
# =============================================================================